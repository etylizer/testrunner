%%% Copyright (c) Meta Platforms, Inc. and……         |
%%%                                        |         |
%%% This source code is licensed under the……         |
%%% the LICENSE file in the root directory……         |
                                           |         |
-module(eqwater).                          |         |
                                           |         |
-compile([export_all, nowarn_export_all]). |         |
                                           |         |
-spec occ01                                |         |
  (a | b) -> b.                            |         |
occ01(Arg) ->                              | OK      |
  case Arg of                              |         |
    a -> b;                                |         |
    B -> B                                 |         |
  end.                                     |         |
                                           |         |
-spec occ01_elab                           |         |
  (a | b) -> b.                            |         |
occ01_elab(Arg) ->                         | OK      |
  Res = case Arg of                        |         |
    a -> b;                                |         |
    B -> B                                 |         |
  end,                                     |         |
  Res.                                     |         |
                                           |         |
-spec occ01_cl                             |         |
  (a | b) -> b.                            |         |
occ01_cl(a) -> b;                          | OK      |
occ01_cl(B) -> B.                          |         |
                                           |         |
-spec occ02                                |         |
  (a | {b, integer()}) -> integer().       |         |
occ02(Arg) ->                              | OK      |
  case Arg of                              |         |
    a -> 0;                                |         |
    {_, I} -> I                            |         |
  end.                                     |         |
                                           |         |
-spec occ02_cl                             |         |
  (a | {b, integer()}) -> integer().       |         |
occ02_cl(a) -> 0;                          | OK      |
occ02_cl({_, I}) -> I.                     |         |
                                           |         |
-spec occ03                                |         |
  ({a, atom()} | {b, binary()}) ->         |         |
  binary().                                |         |
occ03(Arg) ->                              | OK      |
  case Arg of                              |         |
    {a, A} -> atom_to_binary(A);           |         |
    {_, B} -> B                            |         |
  end.                                     |         |
                                           |         |
-spec occ03_cl                             |         |
  ({a, atom()} | {b, binary()}) ->         |         |
  binary().                                |         |
occ03_cl({a, A}) -> atom_to_binary(A);     | OK      |
occ03_cl({_, B}) -> B.                     |         |
                                           |         |
-spec occ04(atom() | binary())             |         |
    -> binary().                           |         |
occ04(Arg) ->                              | OK      |
  case Arg of                              |         |
    A when is_atom(A) ->                   |         |
      atom_to_binary(A);                   |         |
    B ->                                   |         |
      B                                    |         |
  end.                                     |         |
                                           |         |
-spec occ04_cl                             |         |
  (atom() | binary())                      |         |
    -> binary().                           |         |
occ04_cl(A) when is_atom(A) ->             | OK      |
  atom_to_binary(A);                       |         |
occ04_cl(B) ->                             |         |
  B.                                       |         |
                                           |         |
-spec occ04_if(atom() | binary())          |         |
    -> binary().                           |         |
occ04_if(A) ->                             | OK      |
  if                                       |         |
    is_atom(A) -> atom_to_binary(A);       |         |
    true -> A                              |         |
  end.                                     |         |
                                           |         |
-spec occ04_if_elab(atom() | binary())     |         |
    -> binary().                           |         |
occ04_if_elab(A) ->                        | OK      |
  Res = if                                 |         |
    is_atom(A) -> atom_to_binary(A);       |         |
    true -> A                              |         |
  end,                                     |         |
  Res.                                     |         |
                                           |         |
-spec occ05_1                              |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_1(Arg) ->                            | OK      |
  case Arg of                              |         |
    A when is_atom(A) or                   |         |
           is_integer(A) -> <<>>;          |         |
    B -> B                                 |         |
  end.                                     |         |
                                           |         |
-spec occ05_1_cl                           |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_1_cl(A)                              | OK      |
  when is_atom(A) or                       |         |
       is_integer(A) -> <<>>;              |         |
occ05_1_cl(B) -> B.                        |         |
                                           |         |
-spec occ05_1_if                           |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_1_if(A) ->                           | OK      |
  if                                       |         |
    is_atom(A) or                          |         |
    is_integer(A) -> <<>>;                 |         |
    true -> A                              |         |
  end.                                     |         |
                                           |         |
-spec occ05_2                              |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_2(Arg) ->                            | OK      |
  case Arg of                              |         |
    A when is_atom(A); is_integer(A) ->    |         |
      <<>>;                                |         |
    B ->                                   |         |
      B                                    |         |
  end.                                     |         |
                                           |         |
-spec occ05_2_cl                           |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_2_cl(A)                              | OK      |
  when is_atom(A); is_integer(A) ->        |         |
  <<>>;                                    |         |
occ05_2_cl(B) -> B.                        |         |
                                           |         |
-spec occ05_2_if                           |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_2_if(A) ->                           | OK      |
  if                                       |         |
    is_atom(A); is_integer(A) ->           |         |
      <<>>;                                |         |
    true ->                                |         |
      A                                    |         |
  end.                                     |         |
                                           |         |
-spec occ05_3_neg                          |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_3_neg(Arg) ->                        | ERROR   |
  case Arg of                              |         |
    A when is_atom(A);                     |         |
      is_integer(A), A > 0 ->              |         |
      <<>>;                                |         |
    B ->                                   |         |
      B                                    |         | B.
                                           |         | Expected: binary()
                                           |         | Got     : none() | number() | binary()
                                           |         | 
                                           |         |   none() | number() | binary() is not a subtype of binary()
                                           |         |   because
                                           |         |   number() is not a subtype of binary()
  end.                                     |         |
                                           |         |
-spec occ05_3_neg_cl                       |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_3_neg_cl(A)                          | ERROR   |
  when is_atom(A);                         |         |
       is_integer(A), A > 0 ->             |         |
    <<>>;                                  |         |
occ05_3_neg_cl(B) -> B.                    |         | B.
                                           |         | Expected: binary()
                                           |         | Got     : none() | number() | binary()
                                           |         | 
                                           |         |   none() | number() | binary() is not a subtype of binary()
                                           |         |   because
                                           |         |   number() is not a subtype of binary()
                                           |         |
-spec occ05_3_neg_if                       |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ05_3_neg_if(A) ->                       | ERROR   |
  if                                       |         |
    is_atom(A);                            |         |
    is_integer(A), A > 0 ->                |         |
      <<>>;                                |         |
    true ->                                |         |
      A                                    |         | A.
                                           |         | Expected: binary()
                                           |         | Got     : none() | number() | binary()
                                           |         | 
                                           |         |   none() | number() | binary() is not a subtype of binary()
                                           |         |   because
                                           |         |   number() is not a subtype of binary()
  end.                                     |         |
                                           |         |
-spec occ06                                |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ06(Arg) ->                              | OK      |
  case Arg of                              |         |
    A when not is_binary(A) ->             |         |
      <<>>;                                |         |
    B ->                                   |         |
      B                                    |         |
  end.                                     |         |
                                           |         |
-spec occ06_cl                             |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ06_cl(A)                                | OK      |
  when not is_binary(A) ->                 |         |
    <<>>;                                  |         |
occ06_cl(B) ->                             |         |
  B.                                       |         |
                                           |         |
-spec occ06_if                             |         |
  (atom() | integer() | binary())          |         |
    -> binary().                           |         |
occ06_if(A) ->                             | OK      |
  if                                       |         |
    not is_binary(A) ->                    |         |
      <<>>;                                |         |
    true ->                                |         |
      A                                    |         |
  end.                                     |         |
                                           |         |
-spec occ07                                |         |
  (atom() | binary(),                      |         |
    number() | list()) ->                  |         |
  binary() | number().                     |         |
occ07(X, _) when not is_atom(X) -> X;      | OK      |
occ07(_, Y) when is_list(Y) -> 0;          |         |
occ07(_, Y) -> Y.                          |         |
                                           |         |
%%% getting none()                         |         |
                                           |         |
-spec occ08(atom()) -> none().             |         |
occ08(A) when is_number(A) -> A.           | OK      |
                                           |         |
-spec occ09(atom()) -> boolean() | undef.  |         |
occ09(X) when is_boolean(X) -> X;          | OK      |
occ09(_) -> undef.                         |         |
                                           |         |
-spec produce() -> atom() | binary().      |         |
produce() -> error(not_implemented).       | OK      |
                                           |         |
-spec close() -> ok.                       |         |
close() -> ok.                             | OK      |
                                           |         |
-spec try_of_01() -> binary().             |         |
try_of_01() ->                             | OK      |
  try                                      |         |
    produce()                              |         |
  of                                       |         |
    A when is_atom(A) ->                   |         |
      atom_to_binary(A);                   |         |
    B -> B                                 |         |
  catch                                    |         |
    _ -> <<>>                              |         |
  after                                    |         |
    close()                                |         |
  end.                                     |         |
                                           |         |
-spec try_of_01_elab() -> binary().        |         |
try_of_01_elab() ->                        | OK      |
  Res = try                                |         |
    produce()                              |         |
  of                                       |         |
    A when is_atom(A) ->                   |         |
      atom_to_binary(A);                   |         |
    B -> B                                 |         |
  catch                                    |         |
    _ -> <<>>                              |         |
  after                                    |         |
    close()                                |         |
  end,                                     |         |
  Res.                                     |         |
                                           |         |
-spec lambda_call(X :: atom() | binary())  |         |
  -> binary().                             |         |
lambda_call(X) ->                          | OK      |
  (fun                                     |         |
    (A) when is_atom(A) ->                 |         |
      atom_to_binary(A);                   |         |
    (B) -> B                               |         |
  end)(X).                                 |         |
                                           |         |
-spec lambda_call_elab                     |         |
(X :: atom() | binary()) -> binary().      |         |
lambda_call_elab(X) ->                     | OK      |
  Res =                                    |         |
  (fun                                     |         |
     (A) when is_atom(A) ->                |         |
       atom_to_binary(A);                  |         |
     (B) -> B                              |         |
  end)(X),                                 |         |
  Res.                                     |         |
                                           |         |
-spec                                      |         |
lambda1() ->                               |         |
  fun((atom() | binary())                  |         |
      -> binary()).                        |         |
lambda1() ->                               | OK      |
  fun                                      |         |
    (A) when is_atom(A) ->                 |         |
      atom_to_binary(A);                   |         |
    (B) -> B                               |         |
  end.                                     |         |
                                           |         |
-record(eqwater, {f1, f2}).                |         |
-spec occ10(#eqwater{} | {err, term()}) -> |         |
  {ok, term()} | {err, term()}.            |         |
occ10(In) ->                               | OK      |
  case In of                               |         |
    #eqwater{} -> {ok, In};                |         |
    Other -> Other                         |         |
  end.                                     |         |
                                           |         |
%% important for thrift                    |         |
%% see D31025723                           |         |
-record(rec, {                             |         |
  id1 :: undefined | integer(),            |         |
  id2 :: undefined | integer()             |         |
}).                                        |         |
-spec collect_ids(#rec{}) ->               |         |
  [integer()].                             |         |
collect_ids(Rec) ->                        | OK      |
  Ids0 = [],                               |         |
  Ids1 = case Id1 = Rec#rec.id1 of         |         |
    undefined -> Ids0;                     |         |
    _ -> [Id1 | Ids0]                      |         |
  end,                                     |         |
  Ids2 = case Id2 = Rec#rec.id1 of         |         |
    undefined -> Ids0;                     |         |
    _ -> [Id2 | Ids1]                      |         |
  end,                                     |         |
  Ids2.                                    |         |
                                           |         |
-record(a_rec, {                           |         |
  a :: atom()                              |         |
}).                                        |         |
-record(ab_rec, {                          |         |
  ab :: atom() | binary()                  |         |
}).                                        |         |
                                           |         |
-spec occ11(#ab_rec{} | atom())            |         |
  -> atom().                               |         |
occ11(#ab_rec{ab = A})                     | ERROR   |
  when is_atom(A) -> A;                    |         |
occ11(A) -> A.                             |         | A.
                                           |         | Expected: atom()
                                           |         | Got     : #ab_rec{} | atom()
                                           |         | 
                                           |         |   #ab_rec{} | atom() is not a subtype of atom()
                                           |         |   because
                                           |         |   #ab_rec{} is not a subtype of atom()
                                           |         |
-spec occ12(#ab_rec{} | atom())            |         |
  -> atom().                               |         |
occ12(#ab_rec{ab = A}) ->                  | OK      |
  if                                       |         |
    is_atom(A) -> A;                       |         |
    true -> undefined                      |         |
  end;                                     |         |
occ12(A) -> A.                             |         |
                                           |         |
-spec occ13                                |         |
(#ab_rec{} | atom(), #a_rec{})             |         |
  -> atom().                               |         |
occ13(#ab_rec{ab = A},                     | ERROR   |
      #a_rec{a = A}) -> A;                 |         |
occ13(A, _) -> A.                          |         | A.
                                           |         | Expected: atom()
                                           |         | Got     : #ab_rec{} | atom()
                                           |         | 
                                           |         |   #ab_rec{} | atom() is not a subtype of atom()
                                           |         |   because
                                           |         |   #ab_rec{} is not a subtype of atom()
                                           |         |
-spec occ14                                |         |
  (#a_rec{} | atom())                      |         |
    -> atom().                             |         |
occ14(#a_rec{a = Z}) -> Z;                 | OK      |
occ14(A) -> A.                             |         |
                                           |         |
-spec occ15                                |         |
  (#a_rec{} | atom(), #ab_rec{})           |         |
    -> atom().                             |         |
occ15(#a_rec{a = Z},                       | OK      |
  #ab_rec{}) -> Z;                         |         |
occ15(A, _) -> A.                          |         |
                                           |         |
-spec occ16                                |         |
  (#a_rec{} | atom(), #ab_rec{})           |         |
    -> atom().                             |         |
occ16(#a_rec{},                            | OK      |
  #ab_rec{}) -> ok;                        |         |
occ16(A, _) -> A.                          |         |
                                           |         |
-spec occ17(                               |         |
{ax, atom()} | atom(), {bx, atom()}) -> at……         |
occ17({ax, _}, {bx, _}) -> ok;             | OK      |
occ17(A, _) -> A.                          |         |
                                           |         |
% correct work with names and scopes       |         |
                                           |         |
-spec get_int1(rich_tuple()) -> integer(). |         |
get_int1({I, _})                           | OK      |
  when is_integer(I) -> I;                 |         |
get_int1({_, I}) -> I.                     |         |
                                           |         |
-spec get_int2(rich_tuple()) -> integer(). |         |
get_int2({I1, _})                          | OK      |
  when is_integer(I1) -> I1;               |         |
get_int2({_, I2}) -> I2.                   |         |
                                           |         |
-spec get_int3(rich_tuple()) -> integer(). |         |
get_int3({A, I})                           | OK      |
  when is_atom(A) -> I;                    |         |
get_int3({I, _}) -> I.                     |         |
                                           |         |
-spec get_int4_neg                         |         |
  (rich_tuple()) -> integer().             |         |
get_int4_neg({A, I})                       | ERROR   |
  when is_atom(A) -> I;                    |         |
get_int4_neg({_, I}) -> I.                 |         | I.
                                           |         | Expected: number()
                                           |         | Got     : atom()
                                           |         |
-spec get_int5                             |         |
  (rich_tuple()) -> none().                |         |
get_int5({A, A})                           | OK      |
  when is_atom(A) -> A.                    |         |
                                           |         |
-spec get_int6                             |         |
  (rich_tuple()) -> number().              |         |
get_int6({A1, A2})                         | ERROR   |
  when is_atom(A1) and is_atom(A2) -> 1;   |         |
get_int6({_, I}) -> I.                     |         | I.
                                           |         | Expected: number()
                                           |         | Got     : number() | atom()
                                           |         | 
                                           |         |   number() | atom() is not a subtype of number()
                                           |         |   because
                                           |         |   atom() is not a subtype of number()
                                           |         |
-spec get_int7_neg                         |         |
  (rich_tuple()) -> number().              |         |
get_int7_neg({A, A})                       | ERROR   |
  % A is none()                            |         |
  when is_atom(A) -> 0;                    |         |
get_int7_neg({_, I}) -> I.                 |         | I.
                                           |         | Expected: number()
                                           |         | Got     : number() | atom()
                                           |         | 
                                           |         |   number() | atom() is not a subtype of number()
                                           |         |   because
                                           |         |   atom() is not a subtype of number()
                                           |         |
-spec get_int8_neg                         |         |
  (rich_tuple()) -> number().              |         |
get_int8_neg({A, A1})                      | ERROR   |
% A is none()                              |         |
  when is_atom(A) andalso A == A1 -> 0;    |         |
get_int8_neg({_, I}) -> I.                 |         | I.
                                           |         | Expected: number()
                                           |         | Got     : number() | atom()
                                           |         | 
                                           |         |   number() | atom() is not a subtype of number()
                                           |         |   because
                                           |         |   atom() is not a subtype of number()
                                           |         |
-spec use_num_literals(                    |         |
  {number(), atom()} |                     |         |
  {atom(), binary()}                       |         |
) -> binary().                             |         |
use_num_literals({3.14, A}) ->             | OK      |
  atom_to_binary(A);                       |         |
use_num_literals({0, A}) ->                |         |
  atom_to_binary(A);                       |         |
use_num_literals({N, _})                   |         |
  when is_number(N) -> <<>>;               |         |
use_num_literals({_, B}) ->                |         |
  B.                                       |         |
                                           |         |
-record(a, {id :: atom()}).                |         |
-record(b, {id :: atom()}).                |         |
-record(c, {id :: atom()}).                |         |
                                           |         |
-spec ab_b1(#a{} | #b{}) -> #b{}.          |         |
ab_b1(A) when is_record(A, a) ->           | OK      |
  #b{id = A#a.id};                         |         |
ab_b1(B) ->                                |         |
  B.                                       |         |
                                           |         |
-record(union_field, {                     |         |
  field :: atom() | binary()               |         |
}).                                        |         |
                                           |         |
-record(union_field2, {                    |         |
  field :: #a{} | #b{}                     |         |
}).                                        |         |
                                           |         |
-spec record_occ01                         |         |
(#union_field{}) -> binary().              |         |
record_occ01(#union_field{field = B})      | OK      |
  when is_binary(B) -> B;                  |         |
record_occ01(#union_field{field = A}) ->   |         |
  atom_to_binary(A).                       |         |
                                           |         |
-spec record_occ02(#a{} | #b{}) -> #b{}.   |         |
record_occ02(#a{id=Id}) ->                 | OK      |
  #b{id = Id};                             |         |
record_occ02(B) ->                         |         |
  B.                                       |         |
                                           |         |
-spec record_occ03                         |         |
(#union_field2{}) -> #b{}.                 |         |
record_occ03(#union_field2{field = A})     | OK      |
  when is_record(A, a) ->                  |         |
  #b{id = A#a.id};                         |         |
record_occ03(#union_field2{field = B}) ->  |         |
  B.                                       |         |
                                           |         |
-spec record_occ04_neg                     |         |
  (#union_field{}) -> binary().            |         |
record_occ04_neg(R)                        | ERROR   |
  when is_binary(R#union_field.field) ->   |         |
  R#union_field.field;                     |         | ...#union_field.field.
                                           |         | Expected: binary()
                                           |         | Got     : atom() | binary()
                                           |         | 
                                           |         |   atom() | binary() is not a subtype of binary()
                                           |         |   because
                                           |         |   atom() is not a subtype of binary()
record_occ04_neg(R) ->                     |         |
  atom_to_binary(R#union_field.field).     |         |
                                           |         |
-spec record_occ05_neg                     |         |
  (#union_field{}) -> binary().            |         |
record_occ05_neg(#union_field{field = B})  | ERROR   |
  when is_binary(B) -> B;                  |         |
record_occ05_neg(#union_field{field = A}) ……         |
  A.                                       |         | A.
                                           |         | Expected: binary()
                                           |         | Got     : atom() | none()
                                           |         | 
                                           |         |   atom() | none() is not a subtype of binary()
                                           |         |   because
                                           |         |   atom() is not a subtype of binary()
                                           |         |
-spec record_occ06_neg                     |         |
  (#union_field{}) -> binary().            |         |
record_occ06_neg(#union_field{field = B})  | ERROR   |
  when is_binary(B) -> B;                  |         |
record_occ06_neg(R) ->                     |         |
  atom_to_binary(R#union_field.field).     |         | ...#union_field.field.
                                           |         | Expected: atom()
                                           |         | Got     : atom() | binary()
                                           |         | 
                                           |         |   atom() | binary() is not a subtype of atom()
                                           |         |   because
                                           |         |   binary() is not a subtype of atom()
                                           |         |
-spec record_occ07_tuple                   |         |
  ({union_field, atom()}) -> binary().     |         |
record_occ07_tuple({_, A}) -> atom_to_bina…… OK      |
                                           |         |
-spec record_occ07                         |         |
  (#union_field{}) -> binary().            |         |
record_occ07(#union_field{field = B})      | OK      |
  when is_binary(B) -> B;                  |         |
record_occ07(R) ->                         |         |
  record_occ07_tuple(R).                   |         |
                                           |         |
-spec record_occ08_neg                     |         |
  (#union_field{}) -> (atom() | binary()). |         |
record_occ08_neg(#union_field{field = A})  | ERROR   |
  when is_atom(A) -> A;                    |         |
record_occ08_neg(R) ->                     |         |
  record_occ07_tuple(R).                   |         | R.
                                           |         | Expected: {'union_field', atom()}
                                           |         | Got     : #union_field{}
                                           |         | 
                                           |         |   at tuple index 2:
                                           |         |   {'union_field', none() | binary()} is not a subtype of {'union_field', atom()}
                                           |         |   because
                                           |         |   none() | binary() is not a subtype of atom()
                                           |         |   because
                                           |         |   binary() is not a subtype of atom()
                                           |         |
-record(union_field3, {                    |         |
  union :: atom() | binary(),              |         |
  field :: atom()                          |         |
}).                                        |         |
                                           |         |
-spec record_occ09                         |         |
  (#union_field3{}) -> atom().             |         |
record_occ09(#union_field3{_ = U, field = …… OK      |
  when is_binary(U) -> A;                  |         |
record_occ09(#union_field3{_ = U, field = ……         |
  U.                                       |         |
                                           |         |
-spec record_occ10                         |         |
    (#union_field{}) -> binary().          |         |
record_occ10(#union_field{_ = U})          | OK      |
  when is_atom(U) -> atom_to_binary(U);    |         |
record_occ10(#union_field{_ = U}) ->       |         |
  U.                                       |         |
                                           |         |
-record(union_field4, {                    |         |
  x :: integer() | ok,                     |         |
  y :: integer() | err                     |         |
}).                                        |         |
                                           |         |
-spec record_occ11                         |         |
    (#union_field4{}) -> integer().        |         |
record_occ11(#union_field4{x = A, y = A}) …… OK      |
record_occ11(#union_field4{}) -> 0.        |         |
                                           |         |
-spec record_occ12                         |         |
    (#union_field4{}) -> integer().        |         |
record_occ12(#union_field4{_ = A}) -> A;   | OK      |
record_occ12(#union_field4{}) -> 0.        |         |
                                           |         |
-spec record_occ13_neg                     |         |
    (#union_field4{}) -> integer().        |         |
record_occ13_neg(#union_field4{x = A, y = …… ERROR   | A.
                                           |         | Expected: number()
                                           |         | Got     : number() | 'ok'
                                           |         | 
                                           |         |   number() | 'ok' is not a subtype of number()
                                           |         |   because
                                           |         |   'ok' is not a subtype of number()
                                           |         |
-record(triple_union, {                    |         |
    field :: #a{} | #b{} | #c{}            |         |
}).                                        |         |
                                           |         |
-spec triple_union_occ                     |         |
    (#triple_union{}) -> atom().           |         |
triple_union_occ(#triple_union{field = R}) | OK      |
    when                                   |         |
        not is_record(R, a),               |         |
        not is_record(R, b)                |         |
    -> R#c.id;                             |         |
triple_union_occ(#triple_union{field = R}) |         |
    when                                   |         |
        not is_record(R, a)                |         |
    -> R#b.id;                             |         |
triple_union_occ(#triple_union{field = R}) |         |
    -> R#a.id.                             |         |
                                           |         |
% Do we want to support this?              |         |
-spec triple_union_occ2                    |         |
    (#triple_union{}) -> atom().           |         |
triple_union_occ2(#triple_union{field = R}…… ERROR   |
    when                                   |         |
        not is_record(R, a),               |         |
        not is_record(R, b)                |         |
    -> R#c.id;                             |         |
triple_union_occ2({triple_union, B})       |         |
    when                                   |         |
        not is_record(B, a)                |         |
    -> B#b.id;                             |         | B.
                                           |         | Expected: #b{}
                                           |         | Got     : #a{} | #b{} | #c{}
                                           |         | 
                                           |         |   #a{} | #b{} | #c{} is not a subtype of #b{}
                                           |         |   because
                                           |         |   #a{} is not a subtype of #b{}
triple_union_occ2({triple_union, A})       |         |
    -> A#a.id.                             |         |
                                           |         |
-record(refrec, {                          |         |
    z = undefined :: eqwalizer:refinable(u……         |
}).                                        |         |
                                           |         |
-type refrec1() :: #refrec{z :: string()}. |         |
                                           |         |
-spec get_s(refrec1()) -> string().        |         |
get_s(#refrec{z = S}) -> S.                | OK      |
                                           |         |
-spec occ18                                |         |
  (a | b) -> b.                            |         |
occ18(A) when A == a -> b;                 | OK      |
occ18(B) -> B.                             |         |
                                           |         |
-spec occ19                                |         |
  (a | b) -> b.                            |         |
occ19(A) when A =:= a -> b;                | OK      |
occ19(B) -> B.                             |         |
                                           |         |
-spec occ20                                |         |
  (a | b) -> b.                            |         |
occ20(B) when B =/= a -> B;                | OK      |
occ20(_) -> b.                             |         |
                                           |         |
-spec occ21                                |         |
  (a | b) -> b.                            |         |
occ21(A) when A =/= b -> b;                | OK      |
occ21(B) -> B.                             |         |
                                           |         |
-spec occ22                                |         |
({a, A} | {b, B}, fun((B) -> A)) -> A.     |         |
occ22({a, A}, _) -> A;                     | OK      |
occ22({b, B}, F) -> F(B).                  |         |
                                           |         |
-spec occ23_neg                            |         |
  ({a, A} | {b, B}, fun((B) -> A)) -> A.   |         |
occ23_neg({a, A}, _) -> A;                 | ERROR   |
occ23_neg({_, B}, F) -> F(B).              |         | B.
                                           |         | Expected: B
                                           |         | Got     : A | B
                                           |         | 
                                           |         |   A | B is not a subtype of B
                                           |         |   because
                                           |         |   A is not a subtype of B
                                           |         |
-spec occ24                                |         |
(fun(() -> atom()) | atom()) ->            |         |
atom().                                    |         |
occ24(F) when is_function(F) -> F();       | OK      |
occ24(A) -> A.                             |         |
                                           |         |
-spec occ25                                |         |
  (fun(() -> atom()) | atom()) ->          |         |
  atom().                                  |         |
occ25(A) when is_atom(A) -> A;             | OK      |
occ25(F) -> F().                           |         |
                                           |         |
-spec occ26_neg                            |         |
  (fun() | {term()}) ->                    |         |
  {term()}.                                |         |
occ26_neg(F) when is_function(F, 1) -> {F(…… ERROR   |
occ26_neg(T) -> T.                         |         | T.
                                           |         | Expected: {term()}
                                           |         | Got     : fun() | {term()}
                                           |         | 
                                           |         |   fun() | {term()} is not a subtype of {term()}
                                           |         |   because
                                           |         |   fun() is not a subtype of {term()}
                                           |         |
-spec occ27_neg                            |         |
  (fun() | {term()}) ->                    |         |
  {term()}.                                |         |
occ27_neg(T) when is_tuple(T) -> T;        | ERROR   |
occ27_neg(F) -> F().                       |         | F.
                                           |         | Expected fun type with arity 0
                                           |         | Got: fun() | none()
                                           |         |
-spec occ28_neg                            |         |
(tuple() | atom()) -> atom().              |         |
occ28_neg(R) when is_record(R, a) -> R#a.i…… ERROR   |
occ28_neg(A) -> A.                         |         | A.
                                           |         | Expected: atom()
                                           |         | Got     : tuple() | atom()
                                           |         | 
                                           |         |   tuple() | atom() is not a subtype of atom()
                                           |         |   because
                                           |         |   tuple() is not a subtype of atom()
                                           |         |
-record(one_field, {                       |         |
  f1 :: integer()                          |         |
}).                                        |         |
-record(two_fields1, {                     |         |
  f1 :: integer(),                         |         |
  f2 :: integer()                          |         |
}).                                        |         |
-record(two_fields2, {                     |         |
  f1 :: integer(),                         |         |
  f2 :: integer()                          |         |
}).                                        |         |
                                           |         |
% we don't "unfold" records                |         |
% as tuples yet                            |         |
-spec todo04                               |         |
(#one_field{} | #two_fields1{}) ->         |         |
integer().                                 |         |
todo04(X) ->                               | ERROR   |
  case X of                                |         |
    {_N, _N1} -> X#one_field.f1            |         | X.
                                           |         | Expected: #one_field{}
                                           |         | Got     : #one_field{} | #two_fields1{}
                                           |         | 
                                           |         |   #one_field{} | #two_fields1{} is not a subtype of #one_field{}
                                           |         |   because
                                           |         |   #two_fields1{} is not a subtype of #one_field{}
  end.                                     |         |
                                           |         |
-spec occ29(#one_field{} | #two_fields1{})……         |
occ29(X) ->                                | OK      |
  case X of                                |         |
    {} -> X                                |         |
  end.                                     |         |
                                           |         |
-spec occ30({}) -> none().                 |         |
occ30(X) ->                                | OK      |
  if                                       |         |
    is_record(X, one_field) -> X           |         |
  end.                                     |         |
                                           |         |
-spec occ31                                |         |
({a, integer()} | {integer(), b}) -> none(……         |
occ31(X) ->                                | OK      |
  case X of                                |         |
    {{}, {}} -> X                          |         |
  end.                                     |         |
                                           |         |
-spec occ32                                |         |
  ({a | integer(), b | integer()}) -> none……         |
occ32(X) ->                                | OK      |
  case X of                                |         |
    {{}, {}} -> X                          |         |
  end.                                     |         |
                                           |         |
-spec occ33                                |         |
(true | false | maybe) ->                  |         |
  boolean() | undefined.                   |         |
occ33(X) when                              | OK      |
  not is_boolean(X) -> undefined;          |         |
occ33(B) -> B.                             |         |
                                           |         |
-record(response, {                        |         |
  id1 :: undefined | number(),             |         |
  id2 :: undefined | number(),             |         |
  id3 :: undefined | number(),             |         |
  id4 :: undefined | number(),             |         |
  id5 :: undefined | number(),             |         |
  id6 :: undefined | number(),             |         |
  id7 :: undefined | number()              |         |
}).                                        |         |
                                           |         |
-spec extract_id1                          |         |
    (#response{}) -> number().             |         |
extract_id1(#response{                     | OK      |
  id1 = Id1,                               |         |
  id2 = Id2                                |         |
}) ->                                      |         |
  if                                       |         |
    Id1 =/= undefined -> Id1;              |         |
    Id2 =/= undefined -> Id2;              |         |
    true -> erlang:error(no_id)            |         |
  end.                                     |         |
                                           |         |
-spec extract_id2                          |         |
    (#response{}) -> number().             |         |
extract_id2(#response{                     | OK      |
  id1 = Id1,                               |         |
  id2 = Id2,                               |         |
  id3 = Id3,                               |         |
  id4 = Id4,                               |         |
  id5 = Id5,                               |         |
  id6 = Id6,                               |         |
  id7 = Id7                                |         |
}) ->                                      |         |
  if                                       |         |
    Id1 =/= undefined -> Id1;              |         |
    Id2 =/= undefined -> Id2;              |         |
    Id3 =/= undefined -> Id3;              |         |
    Id4 =/= undefined -> Id4;              |         |
    Id5 =/= undefined -> Id5;              |         |
    Id6 =/= undefined -> Id6;              |         |
    Id7 =/= undefined -> Id7;              |         |
    true -> erlang:error(no_id)            |         |
  end.                                     |         |
                                           |         |
-type result(A) ::                         |         |
  {ok, A} | {err, atom()}.                 |         |
-spec map_result                           |         |
    (fun((A) -> B), result(A))             |         |
      -> result(B).                        |         |
map_result(F, Res) ->                      | OK      |
  case Res of                              |         |
    {ok, A} -> {ok, F(A)};                 |         |
    Err -> Err                             |         |
  end.                                     |         |
                                           |         |
-type choice(A) :: {bad, A} | {good, A}.   |         |
-type error() :: {err, atom()}.            |         |
-spec get(choice(A) | error())             |         |
      -> A | error().                      |         |
get({Tag, A}) when (Tag == bad);           | OK      |
                   (Tag == good) ->        |         |
  A;                                       |         |
get(Err) ->                                |         |
  Err.                                     |         |
                                           |         |
-type rich_tuple() ::                      |         |
{atom(), integer()} | {integer(), atom()}. |         |
-spec get_int(rich_tuple()) -> integer().  |         |
get_int({I, _}) when is_integer(I) -> I;   | OK      |
get_int({_, I}) -> I.                      |         |
                                           |         |
-spec occ_or                               |         |
    (atom() | integer() | binary())        |         |
      -> binary().                         |         |
occ_or(Arg) ->                             | OK      |
  case Arg of                              |         |
    A when is_atom(A) or                   |         |
      is_integer(A) -> <<>>;               |         |
    B -> B                                 |         |
  end.                                     |         |
                                           |         |
-spec occ_orelse                           |         |
    (atom() | integer() | binary())        |         |
      -> binary().                         |         |
occ_orelse(Arg) ->                         | OK      |
  case Arg of                              |         |
    A when is_atom(A) orelse               |         |
      is_integer(A) -> <<>>;               |         |
    B -> B                                 |         |
  end.                                     |         |
                                           |         |
-spec occ_and                              |         |
({result(number()), result(number())})     |         |
  -> number().                             |         |
occ_and({{Tag1, I1}, {Tag2, I2}})          | OK      |
  when (Tag1 == ok) and (Tag2 == ok) ->    |         |
  I1 + I2;                                 |         |
occ_and(_) ->                              |         |
  0.                                       |         |
                                           |         |
-spec occ_andalso                          |         |
    ({result(number()), result(number())}) |         |
      -> number().                         |         |
occ_andalso({{Tag1, I1}, {Tag2, I2}})      | OK      |
  when (Tag1 == ok) andalso (Tag2 == ok) -……         |
  I1 + I2;                                 |         |
occ_andalso(_) ->                          |         |
  0.                                       |         |
                                           |         |
-spec multi_param1(                        |         |
    term(),                                |         |
    number() | atom()                      |         |
) -> number().                             |         |
multi_param1(_, A) when is_atom(A) -> 1;   | OK      |
multi_param1(_, Y) -> Y.                   |         |
                                           |         |
-spec multi_param2_neg(                    |         |
    term(),                                |         |
    number() | atom()                      |         |
) -> number().                             |         |
multi_param2_neg(X, Y) when is_atom(X),    | ERROR   |
                is_atom(Y) -> 1;           |         |
multi_param2_neg(_, Y) -> Y.               |         | Y.
                                           |         | Expected: number()
                                           |         | Got     : number() | atom()
                                           |         | 
                                           |         |   number() | atom() is not a subtype of number()
                                           |         |   because
                                           |         |   atom() is not a subtype of number()
                                           |         |
-spec multi_param3(                        |         |
    atom(),                                |         |
    number() | atom()                      |         |
) -> number().                             |         |
multi_param3(X, Y) when is_atom(X),        | OK      |
  is_atom(Y) -> 1;                         |         |
multi_param3(_, Y) -> Y.                   |         |
                                           |         |
-spec multi_param4(                        |         |
    atom(),                                |         |
    number() | atom()                      |         |
) -> {term(), number()}.                   |         |
multi_param4(X, Y) when is_atom(Y) ->      | OK      |
  {X, 1};                                  |         |
multi_param4(_, Y) ->                      |         |
  {ok, Y}.                                 |         |
                                           |         |
-spec foo1({                               |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
}) ->                                      |         |
  binary().                                |         |
foo1({X, Y}) when                          | OK      |
  is_atom(X) or is_atom(Y) ->              |         |
    <<>>;                                  |         |
foo1({B1, B2}) ->                          |         |
    <<B1/binary, B2/binary>>.              |         |
                                           |         |
-spec foo2(                                |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
) ->                                       |         |
  binary().                                |         |
foo2(X, Y) when                            | OK      |
  is_atom(X) or is_atom(Y) ->              |         |
  <<>>;                                    |         |
foo2(B1, B2) ->                            |         |
  <<B1/binary, B2/binary>>.                |         |
                                           |         |
-spec foo3({                               |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
}) ->                                      |         |
  binary().                                |         |
foo3({B1, B2}) when                        | OK      |
  (not is_atom(B1)) and                    |         |
    (not is_atom(B2)) ->                   |         |
  <<B1/binary, B2/binary>>;                |         |
foo3({_, _}) ->                            |         |
  <<>>.                                    |         |
                                           |         |
-spec foo4(                                |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
) ->                                       |         |
  binary().                                |         |
foo4(B1, B2) when                          | OK      |
  (not is_atom(B1)) and                    |         |
    (not is_atom(B2)) ->                   |         |
  <<B1/binary, B2/binary>>;                |         |
foo4(_, _) ->                              |         |
  <<>>.                                    |         |
                                           |         |
-spec foo5({                               |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
}) ->                                      |         |
  binary().                                |         |
foo5({A1, A2}) when                        | OK      |
  is_atom(A1) and is_atom(A2) ->           |         |
  <<>>;                                    |         |
foo5({A, B}) when                          |         |
  is_atom(A) ->                            |         |
  B;                                       |         |
foo5({B, A}) when                          |         |
  is_atom(A) ->                            |         |
  B;                                       |         |
foo5({B1, B2}) ->                          |         |
  <<B1/binary, B2/binary>>.                |         |
                                           |         |
% compare it with foo5                     |         |
% occurrence typing for                    |         |
% multi-param functions                    |         |
% is not the same as for tuples            |         |
-spec foo6(                                |         |
  atom() | binary(),                       |         |
  atom() | binary()                        |         |
) ->                                       |         |
  binary().                                |         |
foo6(A1, A2) when                          | OK      |
  is_atom(A1) and is_atom(A2) ->           |         |
  <<>>;                                    |         |
foo6(A, B) when                            |         |
  is_atom(A) ->                            |         |
  B;                                       |         |
foo6(B, A) when                            |         |
  is_atom(A) ->                            |         |
  B;                                       |         |
foo6(B1, B2) ->                            |         |
  <<B1/binary, B2/binary>>.                |         |
                                           |         |
-spec occ34                                |         |
    (a | b) -> b.                          |         |
occ34(B) when B /= a -> B;                 | OK      |
occ34(_) -> b.                             |         |
                                           |         |
-spec occ35                                |         |
    (a | b) -> b.                          |         |
occ35(A) when A /= b -> b;                 | OK      |
occ35(B) -> B.                             |         |
                                           |         |
-spec occ36(                               |         |
    {atom()} | {{atom()}, {atom()}}        |         |
) -> {{atom()}, {atom()}}.                 |         |
occ36({_, _} = P2) -> P2;                  | OK      |
occ36(P1) -> {P1, P1}.                     |         |
                                           |         |
-spec occ37(                               |         |
    {atom()} | {{atom()}, {atom()}}        |         |
) -> {{atom()}, {atom()}}.                 |         |
occ37(P2 = {_, _}) -> P2;                  | OK      |
occ37(P1) -> {P1, P1}.                     |         |
                                           |         |
-type t10() :: {                           |         |
  atom(),                                  |         |
  a | b,                                   |         |
  undefined | binary()                     |         |
}.                                         |         |
-spec occ38(t10()) -> binary() | no_binary……         |
occ38({_, a, undefined}) -> <<>>;          | OK      |
occ38({_, a, B}) -> B.                     |         |
                                           |         |
-record(rec10, {                           |         |
  f1 :: a | b,                             |         |
  f2 :: undefined | binary()               |         |
}).                                        |         |
-spec occ39(#rec10{}) -> binary().         |         |
occ39(#rec10{f2 = undefined}) -> <<>>;     | OK      |
occ39(#rec10{f2 = B}) -> B.                |         |
                                           |         |
-spec occ40(#rec10{}) -> binary().         |         |
occ40(#rec10{f1 = a, f2 = undefined}) -> <…… OK      |
occ40(#rec10{f1 = a, f2 = B}) -> B.        |         |
                                           |         |
-spec occ41(                               |         |
    {string() | undefined, string()}       |         |
) -> string().                             |         |
occ41(T = {undefined, S}) -> S;            | OK      |
occ41(T = {S, _}) -> S.                    |         |
                                           |         |
% We do not support "deep" matches         |         |
-spec occ42_neg(                           |         |
    {string() | undefined, string()}       |         |
) -> string().                             |         |
                                           |         |
occ42_neg({F, S} = {undefined, _}) -> S;   | ERROR   |
occ42_neg({F, S} = {_, _}) -> F.           |         | F.
                                           |         | Expected: string()
                                           |         | Got     : string() | 'undefined'
                                           |         |
-spec occ43_neg(                           |         |
    {string() | undefined, string()}       |         |
) -> string().                             |         |
                                           |         |
occ43_neg({F, S} = {_, _}) -> S;           | ERROR   |
occ43_neg({F, S} = {_, _}) -> F.           |         | F.
                                           |         | Expected: string()
                                           |         | Got     : string() | 'undefined'
                                           |         |
-record(string_or_def, {                   |         |
    value :: string() | undefined,         |         |
    default :: string()                    |         |
}).                                        |         |
                                           |         |
-spec occ44(#string_or_def{}) -> string(). |         |
occ44(R = #string_or_def{value = undefined…… ERROR   |
    D;                                     |         |
occ44(R = #string_or_def{}) ->             |         |
    R#string_or_def.value.                 |         | ...#string_or_def.value.
                                           |         | Expected: string()
                                           |         | Got     : string() | 'undefined'
                                           |         |
-spec occ45(binary() | atom(), atom())     |         |
      -> {atom(), atom()}.                 |         |
occ45(B, A) when is_binary(B) ->           | OK      |
  {undefined, A};                          |         |
occ45(A1, A2) ->                           |         |
  {A1, A2}.                                |         |
                                           |         |
-spec occ46({binary() | atom(), atom()}) -……         |
occ46(Tuple) ->                            | OK      |
  case Tuple of                            |         |
    {B, A} when is_binary(B) ->            |         |
      {undefined, A};                      |         |
    {A1, A2} ->                            |         |
      {A1, A2}                             |         |
  end.                                     |         |
                                           |         |
-spec occ47(binary() | atom(), atom())     |         |
      -> {atom(), atom()}.                 |         |
occ47(A1, A2) ->                           | OK      |
  case {A1, A2} of                         |         |
    {B, _} when is_binary(B) ->            |         |
      {undefined, A2};                     |         |
    {A3, A4} ->                            |         |
      {A3, A4}                             |         |
  end.                                     |         |
                                           |         |
-spec occ48(binary() | atom(), atom())     |         |
      -> {atom(), atom()}.                 |         |
occ48(A1, A2) ->                           | OK      |
  case {A1, A2} of                         |         |
    {B, _} when is_binary(B) ->            |         |
      {undefined, A2};                     |         |
    _ ->                                   |         |
      {A1, A2}                             |         |
  end.                                     |         |
                                           |         |
-spec occ49(                               |         |
    integer() | undefined,                 |         |
    integer() | undefined                  |         |
) -> {integer(), integer()}.               |         |
occ49(A1, A2) ->                           | OK      |
  case {A1, A2} of                         |         |
    {undefined, undefined} ->              |         |
      {0, 0};                              |         |
    {undefined, _} ->                      |         |
      {0, A2};                             |         |
    {_, undefined} ->                      |         |
      {A1, 0};                             |         |
    _ ->                                   |         |
      {A1, A2}                             |         |
  end.                                     |         |
                                           |         |
-spec occ50                                |         |
    (ok, integer() | undefined)            |         |
    -> integer().                          |         |
occ50(_, undefined) -> 0;                  | OK      |
occ50(_, I) -> I.                          |         |
                                           |         |
-spec occ51                                |         |
    (ok, integer() | undefined)            |         |
    -> integer().                          |         |
occ51(ok, undefined) -> 0;                 | OK      |
occ51(ok, I) -> I.                         |         |
                                           |         |
-spec occ52                                |         |
    ([term()], integer() | undefined)      |         |
    -> integer().                          |         |
occ52(L, undefined) when is_list(L) -> 0;  | OK      |
occ52(_, I) -> I.                          |         |
                                           |         |
-spec occ53_neg                            |         |
    ([term()], integer() | undefined)      |         |
    -> integer().                          |         |
occ53_neg(L, undefined) when is_integer(L)…… ERROR   |
occ53_neg(_, I) -> I.                      |         | I.
                                           |         | Expected: number()
                                           |         | Got     : number() | 'undefined'
                                           |         | 
                                           |         |   number() | 'undefined' is not a subtype of number()
                                           |         |   because
                                           |         |   'undefined' is not a subtype of number()
                                           |         |
-type m() :: #{                            |         |
    a => a,                                |         |
    b => b                                 |         |
}.                                         |         |
                                           |         |
-spec occ54                                |         |
    (m(), integer() | undefined)           |         |
    -> integer().                          |         |
occ54(#{}, undefined) -> 0;                | OK      |
occ54(#{}, I) -> I.                        |         |
                                           |         |
-spec occ55                                |         |
    ([] | atom(), atom()) -> atom().       |         |
occ55([], A) -> A;                         | OK      |
occ55(A, _) -> A.                          |         |
                                           |         |
-spec occ56                                |         |
    ([atom()] | atom(), atom()) -> [atom()……         |
occ56(V, A) ->                             | OK      |
    case V of                              |         |
        [_] -> V;                          |         |
        _ -> [A]                           |         |
    end.                                   |         |
                                           |         |
-spec occ57_neg                            |         |
    ([atom()] | atom(), atom()) -> [atom()……         |
occ57_neg(V, _) ->                         | ERROR   |
    case V of                              |         |
        [_] -> V;                          |         |
        A -> [A]                           |         | [A].
                                           |         | Expected: [atom()]
                                           |         | Got     : [[atom()]] | [atom()]
                                           |         | 
                                           |         |   [[atom()]] | [atom()] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   [[atom()]] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   [atom()] is not a subtype of atom()
    end.                                   |         |
                                           |         |
-spec occ58_neg                            |         |
    ([atom()] | atom(), atom()) -> [atom()……         |
occ58_neg(V, A) ->                         | ERROR   |
    case V of                              |         |
        [_] -> V;                          |         |
        [] -> V;                           |         |
        A2 -> [A2]                         |         | [A2].
                                           |         | Expected: [atom()]
                                           |         | Got     : [[atom()]] | [atom()]
                                           |         | 
                                           |         |   [[atom()]] | [atom()] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   [[atom()]] is not a subtype of [atom()]
                                           |         |   because
                                           |         |   [atom()] is not a subtype of atom()
    end.                                   |         |
                                           |         |
-spec occ_binary_pat_1(                    |         |
  binary() | string(),                     |         |
  integer()                                |         |
) -> binary().                             |         |
occ_binary_pat_1(X, Size) ->               | OK      |
  case X of                                |         |
    <<_:Size/binary>> ->                   |         |
      X;                                   |         |
    _ ->                                   |         |
      <<>>                                 |         |
  end.                                     |         |
                                           |         |
-spec occ_binary_pat_2_neg(                |         |
    binary() | string(),                   |         |
    integer()                              |         |
) -> binary().                             |         |
occ_binary_pat_2_neg(X, Size) ->           | ERROR   |
  case X of                                |         |
    <<_:Size/binary>> ->                   |         |
      X;                                   |         |
    _ ->                                   |         |
      X                                    |         | X.
                                           |         | Expected: binary()
                                           |         | Got     : binary() | string()
                                           |         | 
                                           |         |   binary() | string() is not a subtype of binary()
                                           |         |   because
                                           |         |   string() is not a subtype of binary()
  end.                                     |         |
                                           |         |
-spec occ_binary_pat_3(                    |         |
  {binary(), binary()} |                   |         |
    {atom(), atom()},                      |         |
  integer()                                |         |
) -> binary().                             |         |
occ_binary_pat_3(X, Size) ->               | OK      |
  case X of                                |         |
    {<<_:Size/binary>>, Bin} ->            |         |
      Bin;                                 |         |
    _ ->                                   |         |
      <<>>                                 |         |
  end.                                     |         |
                                           |         |
-spec occ_binary_pat_4_neg(                |         |
  {binary(), binary()} |                   |         |
    {atom(), atom()},                      |         |
  integer()                                |         |
) -> binary().                             |         |
occ_binary_pat_4_neg(X, Size) ->           | ERROR   |
  case X of                                |         |
    {<<_:Size/binary>>, Bin} ->            |         |
      Bin;                                 |         |
    {_, Y} ->                              |         |
      Y                                    |         | Y.
                                           |         | Expected: binary()
                                           |         | Got     : binary() | atom()
                                           |         | 
                                           |         |   binary() | atom() is not a subtype of binary()
                                           |         |   because
                                           |         |   atom() is not a subtype of binary()
  end.                                     |         |
                                           |         |
-spec occ_guard_binary_1(any()) -> binary(……         |
occ_guard_binary_1(V) when V =:= <<"ok">> …… OK      |
occ_guard_binary_1(V) -> <<"err">>.        |         |
                                           |         |
-spec occ_guard_binary_2_neg(any()) -> bin……         |
occ_guard_binary_2_neg(V) when V =:= <<"ok…… ERROR   | V.
                                           |         | Expected: binary()
                                           |         | Got     : 'ok' | binary()
                                           |         | 
                                           |         |   'ok' | binary() is not a subtype of binary()
                                           |         |   because
                                           |         |   'ok' is not a subtype of binary()
occ_guard_binary_2_neg(V) -> <<"err">>.    |         |
                                           |         |
-spec occ_guard_binary_3_neg(binary() | ok……         |
occ_guard_binary_3_neg(V) when V =:= <<"ok…… ERROR   |
occ_guard_binary_3_neg(V) -> V.            |         | V.
                                           |         | Expected: 'ok'
                                           |         | Got     : binary() | 'ok'
                                           |         | 
                                           |         |   binary() | 'ok' is not a subtype of 'ok'
                                           |         |   because
                                           |         |   binary() is not a subtype of 'ok'
                                           |         |
-spec occ_guard_binary_4(any()) -> binary(……         |
occ_guard_binary_4(V) when V =/= <<"ok">> …… OK      |
occ_guard_binary_4(V) -> V.                |         |
                                           |         |
-spec occ_guard_integer(any()) -> integer(……         |
occ_guard_integer(V) when V =:= 0 -> V;    | OK      |
occ_guard_integer(V) when V =/= 1 -> -1;   |         |
occ_guard_integer(V) -> V.                 |         |
                                           |         |
-spec foo7([term()] | number()) -> number(……         |
foo7(Args) ->                              | OK      |
    case Args of                           |         |
        Args when is_list(Args) -> length(……         |
        _ -> Args                          |         |
    end.                                   |         |
                                           |         |
-type my_list() :: {term(), my_list()} | n……         |
                                           |         |
-spec foo8(my_list()) -> number().         |         |
foo8(Args) ->                              | OK      |
    case Args of                           |         |
        {_, L} -> 1 + foo8(L);             |         |
        _ -> Args                          |         |
    end.                                   |         |
                                           |         |
-spec foo8_neg(my_list()) -> number().     |         |
foo8_neg(Args) ->                          | ERROR   |
    case Args of                           |         |
        {_, Args} -> 1 + foo8_neg(Args);   |         |
        _ -> Args                          |         | Args.
                                           |         | Expected: number()
                                           |         | Got     : {term(), my_list()} | none() | none() | number()
                                           |         | 
                                           |         |   {term(), my_list()} | none() | none() | number() is not a subtype of number()
                                           |         |   because
                                           |         |   {term(), my_list()} is not a subtype of number()
    end.                                   |         |
                                           |         |
-spec any_tuple_neg(tuple()) -> ok.        |         |
any_tuple_neg(T) ->                        | ERROR   |
    case T of                              |         |
        _ when is_tuple(T) -> T            |         | T.
                                           |         | Expected: 'ok'
                                           |         | Got     : tuple()
    end.                                   |         |
